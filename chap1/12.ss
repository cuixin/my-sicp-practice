(define (pascal row col)
    (cond ((< row col) 0)
          ((= row 1) 1)
          ((= row col) 1)
          ((= col 1) 1)
          (else (+ (pascal (- row 1) (- col 1))
                   (pascal (- row 1) col)))))

;; pascal recursive calculation
; (pascal 5 3)
; (+ (pascal 4 2) (pascal 4 3))
; (+ (+ (pascal 3 1) (pascal 3 2)) (pascal 4 3))
; (+ (+ 1 (pascal 3 2)) (pascal 4 3))
; (+ (+ 1 (+ (pascal 2 1) (pascal 2 2))) (pascal 4 3))
; (+ (+ 1 (+ 1 (pascal 2 2))) (pascal 4 3))
; (+ (+ 1 (+ 1 1)) (pascal 4 3))
; (+ (+ 1 2) (pascal 4 3))
; (+ 3 (pascal 4 3))
; (+ 3 (+ (pascal 3 2) (pascal 3 3)))
; (+ 3 (+ (pascal 3 2) 1))
; (+ 3 (+ (+ (pascal 2 1) (pascal 2 2)) 1))
; (+ 3 (+ (+ 1 (pascal 2 2)) 1))
; (+ 3 (+ (+ 1 1) 1))
; (+ 3 (+ 2 1))
; (+ 3 3)
; 6

; (pascal 4 2)
; (+ (pascal 3 1) (pascal 3 2))
; (+ 1 (pascal 3 2))
; (+ 1 (+ (pascal 2 1) (pascal 2 2)))
; (+ 1 (+ 1 (pascal 2 2)))
; (+ 1 (+ 1 1))
; (+ 1 2)
; 3